package br.com.projeto.GUI;

import br.com.projeto.conexao.ConexaoBanco;
import br.com.projeto.entidades.Livro;
import br.com.projeto.interfaces.AcervoDao;
import br.com.projeto.interfacesImpl.AcervoDaoImpl;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Rafael
 */
public class PesquisaDeLivros extends javax.swing.JFrame {

    /**
     * Creates new form Livros
     */
    public PesquisaDeLivros() {
        initComponents();
        limparTabela();
        AcervoDao acervoDao = new AcervoDaoImpl(ConexaoBanco.getConnection());
        List<Livro> livros = acervoDao.buscarDadosLivros();
        if(livros.isEmpty()){
            JOptionPane.showMessageDialog(this, "Não há livros para listar!");
        } else{
            for (Livro livro : livros) {
                addLinha(livro);
            }
        }
        try {
            Image icon = Toolkit.getDefaultToolkit().getImage("src\\Imagens\\images.png");
            setIconImage(icon);

        } catch (Exception e) {
            e.printStackTrace();
        }

        setSize(1010, 530);
        this.getContentPane().setBackground(Color.WHITE);
    }

    public void limparTabela() {
        DefaultTableModel modelo = (DefaultTableModel) DadosLivros.getModel();
        modelo.setNumRows(0);
    }

    private void addLinha(Livro umLivro) {
        String[] linha = new String[6];
        linha[0] = umLivro.getTitulo();
        linha[1] = umLivro.getAutor().getNome();
        linha[2] = Integer.toString(umLivro.getEdicao());
        linha[3] = Integer.toString(umLivro.getVolume());
        linha[4] = Integer.toString(umLivro.getQuantidade());
        DefaultTableModel modelo = (DefaultTableModel) DadosLivros.getModel();
        modelo.addRow(linha);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Voltar = new javax.swing.JButton();
        barrapesquisa = new javax.swing.JTextField();
        pesquisar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Pesq = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        atualizar = new javax.swing.JButton();
        LivrosTree = new javax.swing.JScrollPane();
        DadosLivros = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Magnoteca");
        getContentPane().setLayout(null);

        Voltar.setFont(new java.awt.Font("Centaur", 0, 14)); // NOI18N
        Voltar.setText("Voltar");
        Voltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VoltarActionPerformed(evt);
            }
        });
        Voltar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                VoltarKeyPressed(evt);
            }
        });
        getContentPane().add(Voltar);
        Voltar.setBounds(880, 430, 76, 34);

        barrapesquisa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                barrapesquisaKeyPressed(evt);
            }
        });
        getContentPane().add(barrapesquisa);
        barrapesquisa.setBounds(40, 100, 720, 30);

        pesquisar.setFont(new java.awt.Font("Centaur", 0, 14)); // NOI18N
        pesquisar.setText("Pesquisar");
        pesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarActionPerformed(evt);
            }
        });
        pesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pesquisarKeyPressed(evt);
            }
        });
        getContentPane().add(pesquisar);
        pesquisar.setBounds(770, 100, 79, 30);

        jLabel1.setFont(new java.awt.Font("Linux Libertine G", 0, 24)); // NOI18N
        jLabel1.setText("LIVROS");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(370, 10, 120, 28);

        Pesq.setFont(new java.awt.Font("Centaur", 0, 14)); // NOI18N
        Pesq.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nome do Livro", "Nome do Autor" }));
        Pesq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PesqActionPerformed(evt);
            }
        });
        getContentPane().add(Pesq);
        Pesq.setBounds(170, 60, 680, 30);

        jLabel2.setFont(new java.awt.Font("Linux Libertine G", 0, 18)); // NOI18N
        jLabel2.setText("Pesquisar por:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(40, 60, 130, 22);

        atualizar.setFont(new java.awt.Font("Centaur", 0, 14)); // NOI18N
        atualizar.setText("Atualizar");
        atualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarActionPerformed(evt);
            }
        });
        atualizar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                atualizarKeyPressed(evt);
            }
        });
        getContentPane().add(atualizar);
        atualizar.setBounds(800, 430, 77, 34);

        DadosLivros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Título", "Autor", "Edição", "Volume", "Quantidade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DadosLivros.getTableHeader().setReorderingAllowed(false);
        LivrosTree.setViewportView(DadosLivros);
        if (DadosLivros.getColumnModel().getColumnCount() > 0) {
            DadosLivros.getColumnModel().getColumn(0).setPreferredWidth(250);
            DadosLivros.getColumnModel().getColumn(1).setPreferredWidth(200);
        }

        getContentPane().add(LivrosTree);
        LivrosTree.setBounds(37, 140, 810, 260);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/MarcadorBG.jpg"))); // NOI18N
        getContentPane().add(jLabel5);
        jLabel5.setBounds(870, -20, 85, 290);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Logo.jpg"))); // NOI18N
        getContentPane().add(jLabel6);
        jLabel6.setBounds(10, 400, 320, 70);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void VoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VoltarActionPerformed
        dispose();
    }//GEN-LAST:event_VoltarActionPerformed

    private void pesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarActionPerformed

        limparTabela();
        switch (Pesq.getSelectedIndex()) {
            case 0:
                AcervoDao acervoDao = new AcervoDaoImpl(ConexaoBanco.getConnection());
                List<Livro> livros = acervoDao.buscarDadosLivrosPorTitulo(barrapesquisa.getText());
                if(livros.isEmpty()){
                    JOptionPane.showMessageDialog(this, "Não há livros para listar!");
                } else{
                    for (Livro livro : livros) {
                        addLinha(livro);
                    }
                }
                
                break;

            case 1:
                AcervoDao acervoDao1 = new AcervoDaoImpl(ConexaoBanco.getConnection());
                List<Livro> livros1 = acervoDao1.buscarDadosLivrosPorAutor(barrapesquisa.getText());
                if(livros1.isEmpty()){
                    JOptionPane.showMessageDialog(this, "Não há livros para listar!");
                } else{
                    for (Livro livro1 : livros1) {
                        addLinha(livro1);
                    }
                }
                
                break;
        }

    }//GEN-LAST:event_pesquisarActionPerformed

    private void PesqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PesqActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PesqActionPerformed

    private void atualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarActionPerformed

        limparTabela();
        AcervoDao acervoDao = new AcervoDaoImpl(ConexaoBanco.getConnection());
        List<Livro> livros = acervoDao.buscarDadosLivros();
        if(livros.isEmpty()){
            JOptionPane.showMessageDialog(this, "Não há livros para listar!");
        } else{
            for (Livro livro : livros) {
                addLinha(livro);
            }
        }

    }//GEN-LAST:event_atualizarActionPerformed

    private void barrapesquisaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_barrapesquisaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            pesquisar.doClick();
        }
    }//GEN-LAST:event_barrapesquisaKeyPressed

    private void VoltarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_VoltarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            Voltar.doClick();
        }
    }//GEN-LAST:event_VoltarKeyPressed

    private void atualizarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_atualizarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            atualizar.doClick();
        }
    }//GEN-LAST:event_atualizarKeyPressed

    private void pesquisarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pesquisarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            pesquisar.doClick();
        }
    }//GEN-LAST:event_pesquisarKeyPressed

    /**
     * @param args the command line arguments
     */
    public JTree tree;
    private DefaultMutableTreeNode Livros;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DadosLivros;
    private javax.swing.JScrollPane LivrosTree;
    private javax.swing.JComboBox Pesq;
    private javax.swing.JButton Voltar;
    private javax.swing.JButton atualizar;
    private javax.swing.JTextField barrapesquisa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JButton pesquisar;
    // End of variables declaration//GEN-END:variables
}
